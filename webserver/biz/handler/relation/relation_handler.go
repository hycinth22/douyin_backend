// Code generated by hertz generator.

package relation

import (
	"context"
	"fmt"
	"log"

	auth "server/auth"
	relation "server/biz/model/relation"
	relationRPC "server/kitex_gen/relation"
	relationService "server/kitex_gen/relation/relationservice"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	client "github.com/cloudwego/kitex/client"
)

var (
	destService      = "douyin_relation_service2"
	serviceHostPorts = "127.0.0.1:9999"
	relationClient   relationService.Client
)

func init() {
	var err error
	relationClient, err = relationService.NewClient(destService, client.WithHostPorts(serviceHostPorts))
	if err != nil {
		panic(fmt.Errorf("Create relationRPC client failed: %v", err))
	}

}

func queryIsFollowUser(ctx context.Context, fromUserId, toUserId int64) (bool, error) {
	rpcReq := &relationRPC.DouyinRelationIsFollowRequest{
		FromUserId: fromUserId,
		ToUserId:   toUserId,
	}
	rpcResp, err := relationClient.RelationIsFollow(ctx, rpcReq)
	if err != nil {
		log.Printf("RPC error: %v\n", err.Error())
		return false, err
	}
	return rpcResp.IsFollow, nil
}

func queryUserInfo(ctx context.Context, fromUserId, toUserId int64) (*relation.User, error) {
	rpcReq := &relationRPC.DouyinUserDetailRequest{
		UserId: toUserId,
	}
	rpcResp, err := relationClient.UserDetail(ctx, rpcReq)
	if err != nil {
		log.Printf("RPC error: %v\n", err.Error())
		return nil, err
	}
	isFollow, err := queryIsFollowUser(ctx, fromUserId, toUserId)
	if err != nil {
		log.Printf("RPC error: %v\n", err.Error())
		return nil, err
	}
	return &relation.User{
		Id:              rpcResp.Detail.Id,
		Name:            rpcResp.Detail.Name,
		FollowCount:     rpcResp.Detail.FollowCount,
		FollowerCount:   rpcResp.Detail.FollowerCount,
		IsFollow:        isFollow,
		Avatar:          rpcResp.Detail.Avatar,
		BackgroundImage: rpcResp.Detail.BackgroundImage,
		Signature:       rpcResp.Detail.Signature,
		TotalFavorited:  rpcResp.Detail.TotalFavorited,
		WorkCount:       rpcResp.Detail.WorkCount,
		FavoriteCount:   rpcResp.Detail.FavoriteCount,
	}, nil
}

func queryRecentMessage(ctx context.Context, currentUID, friendUID int64) (string string, msgType int64, err error) {
	rpcReq := &relationRPC.DouyinFriendRecentMsgRequest{
		UserId:   currentUID,
		FriendId: friendUID,
	}
	rpcResp, err := relationClient.FriendRecentMsg(ctx, rpcReq)
	if err != nil {
		log.Printf("RPC error: %v\n", err.Error())
		return "", 0, err
	}
	return rpcResp.Message, rpcResp.MsgType, nil
}

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	loginInfo, err := auth.Auth(req.Token)
	if err != nil {
		c.String(403, fmt.Sprintf("Auth failed: %v", err.Error()))
		return
	}
	rpcReq := &relationRPC.DouyinRelationActionRequest{
		FromUserId: loginInfo.UserId,
		ToUserId:   req.ToUserId,
		ActionType: req.ActionType,
	}
	rpcResp, err := relationClient.RelationAction(ctx, rpcReq)
	if err != nil {
		log.Printf("RPC error: %v\n", err.Error())
		c.String(500, "RPC error")
		return
	}
	resp := &relation.DouyinRelationActionResponse{
		StatusCode: rpcResp.StatusCode,
		StatusMsg:  rpcResp.StatusMsg,
	}
	c.JSON(consts.StatusOK, resp)
}

// RelationFollowList .
// @router /douyin/relation/follow/list/ [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	loginInfo, err := auth.Auth(req.Token)
	if err != nil {
		c.String(403, fmt.Sprintf("Auth failed: %v", err.Error()))
		return
	}
	rpcReq := &relationRPC.DouyinRelationFollowListRequest{
		UserId: req.UserId,
	}
	rpcResp, err := relationClient.RelationFollowList(ctx, rpcReq)
	if err != nil {
		log.Printf("RPC error: %v\n", err.Error())
		c.String(500, "RPC error")
		return
	}
	userList := make([]*relation.User, len(rpcResp.UserIdList))
	for i := range rpcResp.UserIdList {
		userList[i], err = queryUserInfo(ctx, loginInfo.UserId, rpcResp.UserIdList[i])
		if err != nil {
			log.Printf("RPC error: %v\n", err.Error())
			// dont stop, keep this user's info empty, just return others
		}
	}
	resp := &relation.DouyinRelationFollowListResponse{
		StatusCode: rpcResp.StatusCode,
		StatusMsg:  rpcResp.StatusMsg,
		UserList:   userList,
	}
	c.JSON(consts.StatusOK, resp)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	loginInfo, err := auth.Auth(req.Token)
	if err != nil {
		c.String(403, fmt.Sprintf("Auth failed: %v", err.Error()))
		return
	}
	rpcReq := &relationRPC.DouyinRelationFollowerListRequest{
		UserId: req.UserId,
	}
	rpcResp, err := relationClient.RelationFollowerList(ctx, rpcReq)
	if err != nil {
		log.Printf("RPC error: %v\n", err.Error())
		c.String(500, "RPC error")
		return
	}
	userList := make([]*relation.User, len(rpcResp.UserIdList))
	for i := range rpcResp.UserIdList {
		userList[i], err = queryUserInfo(ctx, loginInfo.UserId, rpcResp.UserIdList[i])
		if err != nil {
			log.Printf("RPC error: %v\n", err.Error())
			// dont stop, keep this user's info empty, just return others
		}
	}
	resp := &relation.DouyinRelationFollowerListResponse{
		StatusCode: rpcResp.StatusCode,
		StatusMsg:  rpcResp.StatusMsg,
		UserList:   userList,
	}
	c.JSON(consts.StatusOK, resp)
}

// RelationFriendList .
// @router /douyin/relation/friend/list/ [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	loginInfo, err := auth.Auth(req.Token)
	if err != nil {
		c.String(403, fmt.Sprintf("Auth failed: %v", err.Error()))
		return
	}
	if loginInfo.UserId != req.UserId {
		c.String(403, "cannot query other user's friend list")
		return
	}
	rpcReq := &relationRPC.DouyinRelationFriendListRequest{
		UserId: req.UserId,
	}
	rpcResp, err := relationClient.RelationFriendList(ctx, rpcReq)
	if err != nil {
		log.Printf("RPC error: %v\n", err.Error())
		c.String(500, "RPC error")
		return
	}
	userList := make([]*relation.FriendUser, len(rpcResp.UserIdList))
	for i := range rpcResp.UserIdList {
		msg, msgtype, err := queryRecentMessage(ctx, req.UserId, rpcResp.UserIdList[i])
		if err != nil {
			log.Printf("RPC error: %v\n", err.Error())
		}
		userInfo, err := queryUserInfo(ctx, loginInfo.UserId, rpcResp.UserIdList[i])
		if err != nil {
			log.Printf("RPC error: %v\n", err.Error())
			// dont stop, keep this user's info empty, just return others
		}
		userList[i] = &relation.FriendUser{
			User:    userInfo,
			Message: msg,
			MsgType: msgtype,
		}
	}
	resp := &relation.DouyinRelationFriendListResponse{
		StatusCode: rpcResp.StatusCode,
		StatusMsg:  rpcResp.StatusMsg,
		UserList:   userList,
	}
	c.JSON(consts.StatusOK, resp)
}
